use crate::{
    context::{
        CompilerContext,
        scope::{Item, ScopeId},
    },
    hir::{Definition, Expr, Hir, HirId, HirMapping},
    hir_put_expr,
};

/// Ugly boilerplate generated by llm
/// TODO: We need individual Intrinsic enum for each type
pub fn setup_intrinsics<'hir>(
    hir: &'hir Hir,
    context: &mut CompilerContext<'hir>,
    builtin_scope: ScopeId,
    builtin_hir_id: HirId,
) {
    // Register built-in types
    for builtin in [
        BuiltinType::Any,
        BuiltinType::Bool,
        BuiltinType::I8,
        BuiltinType::U8,
        BuiltinType::I16,
        BuiltinType::U16,
        BuiltinType::I32,
        BuiltinType::U32,
        BuiltinType::I64,
        BuiltinType::U64,
        BuiltinType::I128,
        BuiltinType::U128,
        BuiltinType::Isize,
        BuiltinType::Usize,
        BuiltinType::Str,
        BuiltinType::Object,
        BuiltinType::Symbol,
        BuiltinType::Unit,
        BuiltinType::Void,
        BuiltinType::Noreturn,
        BuiltinType::Type,
    ] {
        register_builtin_type(hir, builtin, context, builtin_scope, builtin_hir_id);
    }
}

pub fn register_builtin_type<'hir>(
    hir: &'hir Hir,
    builtin: BuiltinType,
    context: &mut CompilerContext<'hir>,
    builtin_scope: ScopeId,
    builtin_hir_id: HirId,
) {
    let name = hir.str_arena.intern(builtin.to_str());
    let _bool = hir.put(HirMapping::Definition(
        hir.intern_definition(Definition::Intrinsic(Intrinsic::Ty(builtin))),
        builtin_hir_id,
    ));
    context
        .scope_manager
        .add_item(Item::new(name, _bool, None), builtin_scope)
        .unwrap();
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Intrinsic {
    Ty(BuiltinType),
}

impl Intrinsic {
    pub fn to_str(&self) -> &str {
        match self {
            Intrinsic::Ty(builtin) => builtin.to_str(),
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum BuiltinType {
    Any,
    Bool,
    I8,
    U8,
    I16,
    U16,
    I32,
    U32,
    I64,
    U64,
    I128,
    U128,
    Isize,
    Usize,
    Str,
    Object,
    Symbol,
    Unit,
    Void,
    Noreturn,
    Type,
}

impl BuiltinType {
    pub fn to_str(&self) -> &str {
        match self {
            BuiltinType::Any => "Any",
            BuiltinType::Bool => "bool",
            BuiltinType::I8 => "i8",
            BuiltinType::U8 => "u8",
            BuiltinType::I16 => "i16",
            BuiltinType::U16 => "u16",
            BuiltinType::I32 => "i32",
            BuiltinType::U32 => "u32",
            BuiltinType::I64 => "i64",
            BuiltinType::U64 => "u64",
            BuiltinType::I128 => "i128",
            BuiltinType::U128 => "u128",
            BuiltinType::Isize => "isize",
            BuiltinType::Usize => "usize",
            BuiltinType::Str => "str",
            BuiltinType::Object => "Object",
            BuiltinType::Symbol => "Symbol",
            BuiltinType::Unit => "unit",
            BuiltinType::Void => "void",
            BuiltinType::Noreturn => "Noreturn",
            BuiltinType::Type => "Type",
        }
    }
}
